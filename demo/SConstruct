# ex: syntax=python

import os

use_clang = True

#---- basic compiler settings ----------------------------------------
env = Environment(CCFLAGS=['-std=c++11'])
if use_clang:
    env.Replace(CXX='clang++')
    env.Append(ENV={'TERM': os.environ['TERM']}) # for color output

#---- build fles_ipc and flib_dpb libraries --------------------------
def lib_from_external_source_tree(name):
    description = 'the root of the %s source tree' % (name.lower())
    env_var = name.upper()
    try:
        env.Replace(**{env_var: os.environ[env_var]})
    except KeyError:
        raise SystemExit("Please set the %s environment variable to %s." % (
                         env_var, description))
    env.Append(**{'CPPPATH': ['$%s' % env_var]})
    return env.StaticLibrary(env.Glob('$%s/*.cpp' % env_var))

libs = [lib_from_external_source_tree(name)
        for name in ['fles_ipc', 'flib_dpb']]

#---- build SPADIC Message library -----------------------------------
env.Replace(MSG_DIR='../../message')
env.Append(CPPPATH=['$MSG_DIR', '$MSG_DIR/wrap/cpp'])
spadic_msg = env.Library([env.Glob('$MSG_DIR/*.c'),
                          '$MSG_DIR/wrap/cpp/Message.cpp'])

#---- build application ----------------------------------------------
env.Append(CPPPATH=['..'])
env.Program('tsreader', ['timeslice_reader.cpp', '../TimesliceReader.cpp'],
            LIBS=libs + [spadic_msg, 'boost_serialization'])
